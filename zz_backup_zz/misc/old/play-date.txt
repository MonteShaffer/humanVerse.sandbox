
date.monthDictionary = function()
	{
	# https://connectpals.org/twelve-months-in-different-languages-with-audios/
	# https://www.loc.gov/standards/iso639-2/php/code_list.php
	en = "1-January; 2-February; 3-March; 4-April; 5-May; 6-June; 7-July; 8-August; 9-September; 10-October; 11-November; 12-December"; # english
	fr = "1-Janvier; 2-Février; 3-Mars; 4-Avril; 5-Mai; 6-Juin; 7-Juillet; 8-Août; 9-Septembre; 10-Octobre; 11-Novembre; 12-Décembre"; # french
	de = "1-Januar; 2-Februar; 3-März; 4-April; 5-Mai; 6-Juni; 7-Juli; 8-August; 9-September; 10-Oktober; 11-November; 12-Dezember"; # german
	it = "1-Gennaio; 2-Febbraio; 3-Marzo; 4-Aprile; 5-Maggio; 6-Giugno; 7-Luglio; 8-Agosto; 9-Settembre; 10-Ottobre; 11-Novembre; 12-Dicembre"; # italian
	pt = "1-Janeiro; 2-Fevereiro; 3-Março; 4-Abril; 5-Maio; 6-Junho; 7-Julho; 8-Agosto; 9-Setembro; 10-Outubro; 11-Novembro; 12-Dezembro"; # portuguese
	es = "1-Enero, 2-Febrero, 3-Marzo, 4-Abril, 5-Mayo, 6-Junio, 7-Julio, 8-Agosto, 9-Setiembre, 10-Octubre, 11-Noviembre, 12-Diciembre"; # spanish
	# https://blogs.transparent.com/latin/months-of-the-year/
	# https://glosbe.com/en/la/month's%20name
	la = "1-Martius, 2-Aprilis, 3-Maius, 4-Iunius, 5-Quintilis, 6-Sextilis, 7-September, 8-October, 9-November, 10-December, 11-Ianuarius, 12-Februarius"; # latin (pre-Caesar)
	laj = "1-Ianuarius, 2-Februarius, 3-Martius, 4-Aprilis, 5-Maius, 6-Iunius, 7-Iulius, 8-Augustus, 9-September, 10-October, 11-November, 12-December"; # latin (Julius-Caesar)


	}

# https://www.php.net/manual/en/function.strftime.php
# https://www.php.net/manual/en/function.strtotime.php
# https://adodb.org/dokuwiki/doku.php?id=v5:datetime:datetime_index
# adodb::date
date.strtotime = function(str, weight="MDY", deep=FALSE)
	{
	# https://cran.r-project.org/web/packages/stringr/vignettes/regular-expressions.html
	#
	# https://riptutorial.com/regex/example/12415/match-a-date
	#(0?[1-9]|1[0-2])([.-\\/ ]?)(0?[1-9]|[12][0-9]|3[01])\2(?:19|20)[0-9]{2} // MMDDYYYY
    #                                             ^ refer to [-/ ]
	# (0?[1-9]|[12][0-9]|3[01])([.-\\/ ]?)(0?[1-9]|1[0-2])\2(?:19|20)[0-9]{2} // DDMMYYYY
	# (?:19|20)[0-9]{2}([.-\\/ ]?)(0?[1-9]|1[0-2])\2(0?[1-9]|[12][0-9]|3[01]) // YYYYMMDD

	# grep("(0?[1-9]|1[0-2])([.-\\/ ]?)(0?[1-9]|[12][0-9]|3[01])\2(?:19|20)[0-9]{2}", "8/20/2008", perl=TRUE)
	# "8/20/2008"
	# "7/26/2009 13:23"
	# "7/26/2009 1:23PM"
	# "23mar1973"
	# 12/11/2015 or 11/12/2015 should give two results ...
	# split = c("/",".","-"," ")
	# time.split = c(":", " ")
	# if deep, loop over languages ...
	# https://connectpals.org/twelve-months-in-different-languages-with-audios/
	# "10/11/06" can be interpreted as "10 November 2006" in the DMY format, "October 11, 2006" in MDY, and "2010 November 6" in YMD.
	# The ISO 8601 format YYYY-MM-DD

	# Sys.setlocale("LC_TIME","Spanish Modern Sort"); weekdays(Sys.Date()+0:6)
	# Sys.setlocale("LC_TIME","English United States"); weekdays(Sys.Date()+0:6)
	# ?Sys.setlocale

	# https://en.wikipedia.org/wiki/Date_format_by_country
	# B – big-endian (year, month, day), e.g. 2006-04-22 or 2006.04.22 or 2006/04/22 or 2006 April 22
	# L – little-endian (day, month, year), e.g. 22.04.2006 or 22/4/2006 or 22-04-2006 or 22 April 2006
	# M – middle-endian (month, day, year), e.g. 04/22/2006 or April 22, 2006

	# International standard ISO 8601 (Representation of dates and times) defines unambiguous written all-numeric big-endian formats for dates, such as 2006-12-31 for 31 December 2006, and time, such as 23:59:58 for 23 hours, 59 minutes, and 58 seconds.

	# https://en.wikipedia.org/wiki/Date_and_time_representation_by_country
	# In certain languages such as Spanish, Portuguese, Dutch, and English the hour is divided into quarters and halves, spoken of relative to the closest hour. In Arabic, thirds of an hour are also used. (xx:20, xx:40)

	# In the French language, the quarters are expressed as additions or subtractions of the full hour:


	# returns a 'Sys.time()' type element
	}

# https://stackoverflow.com/questions/17031002/get-weekdays-in-english-in-r

# do I need to worry about precision?
# ## Julian Day Number (JDN, https://en.wikipedia.org/wiki/Julian_day)












url = "https://github.com/{github.user}/{github.repo}/archive/refs/heads/master.zip";
	# url = "https://codeload.github.com/{github.user}/{github.repo}/zip/refs/heads/master";
	# https://github.com/MonteShaffer/humanVerse/archive/refs/heads/main.zip
	# mine is not master ... 
	
	url = str_replace("{github.user}", github.user, url);
	url = str_replace("{github.repo}", github.repo, url);








parseGithubList = function(url, force.download = FALSE)
	{	
	html.local = getRemoteAndCache(url, force.download = force.download);
	html.cache = str_replace(".html", ".cache", html.local);
	
	github.base = "https://github.com/";
	github.raw 	= "https://raw.githubusercontent.com/";
	
	### Could we do API/JSON instead of HTML CACHING?
		### github.api = "https://api.github.com/";
		## https://api.github.com/repos/MonteShaffer/humanVerse/git/trees/main
		##  ==> https://api.github.com/repos/MonteShaffer/humanVerse/git/trees/75741912434181b468b761303eaa3ec312998e1d
		### if(type == "blob") AND extension = ".R" ... include ...
		### less to parse with HTML

	if(file.exists(html.cache) && !force.download)
		{
		cat("\n", "============", "GRABBING FROM CACHE", "============", "\n");
		# results = as.character( unlist( readFromPipe(html.cache) ) );
		# results = readFromPipe(html.cache);
		results = readRDS(html.cache);
		} else {
		    cat("\n", "============", "DOWNLOADING DIRECTORY PAGE", "============", "\n");
				html.str = readStringFromFile(html.local);
								
				page.info = sliceDiceContent(html.str, start='<div class="js-details-container Details">', end='<div class="Details-content--shown', strip=FALSE, direction="start");
				
				results = NULL;
				page.rows = explodeMe('<div role="row"', page.info);
				nr = length(page.rows);
				for(i in 2:nr)
					{
					row = explodeMe('<span', page.rows[i]);
						row.dt = explodeMe("T", sliceDiceContent(row[3], start='datetime="', end='"', strip=TRUE, direction="start") );
					
						
						
						row.link = sliceDiceContent(row[2], start='href="', end='"', strip=TRUE, direction="start");
							tmp = explodeMe("/", row.link); ntmp = length(tmp);
						row.name = tmp[ntmp];
						row.commit = sliceDiceContent(row[3], start='href="', end='"', strip=TRUE, direction="start");
						row.commit.info = sliceDiceContent(row[3], start="\n", end='<a>', strip=TRUE, direction="start");
						
						row.time = paste0(row.dt[1], " ", str_replace("Z", "", row.dt[2]) );
						
						# install_github("Displayr/flipTime")
						# https://github.com/Displayr/flipTime/blob/master/R/asdatetime.R
						
											
					rinfo = c(row.name, row.time, row.link, row.commit, row.commit.info);
					
					results = rbind(results, rinfo);
					}
				
				results = as.data.frame(results);
					colnames(results) = c("name", "when", "url", "commit", "commit.info");
					# rownames(results) = results$name; # should be unique
					rownames(results) = NULL;
				results$when.time = asDateTime(results$when);
				results = sortDataFrameByNumericColumns(results,"when.time","DESC"); # newest first
				results$folder = !is.substring(results$url, "/blob/"); # blobs are files ...
				
					links = cleanup.url( paste0(github.raw, results$url) );		
					links = str_replace("/blob/", "/", links);
				results$links = "";
				results$links[ which(!results$folder) ] = links [ which(!results$folder) ];
				
				# pipe loses "attributes" ... 
				zipclone = sliceDiceContent(html.str, start='data-open-app="link" href="', end='">', strip=FALSE, direction="start");
				
				results = setAttribute("zipclone", zipclone, results);
				
				# writeToPipe(results, html.cache);
				writeRDS(results, html.cache);
				}
	results;
	}
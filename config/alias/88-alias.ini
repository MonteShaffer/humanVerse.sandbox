;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;{humanVerse};;;;;
;;;;;
;;;;;
;;;;;
;;;;;            Welcome to the {humanVerse}! 
;;;;;             
;;;;;             This is the ALIAS configuration file. 
;;;;;            
;;;;;             This is *different* built using `alias.add();`
;;;;;
;;;;;
;
;;;{R};;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;
;;;;;
;;;;;
; This is a configuration file
; Comments start with ';', as in php.ini
; x = str.pipeHeader("Welcome to the {humanVerse}! \n \n This is the ALIAS configuration file. \n\n This is *different* built using `alias.add();`", ctag=";", stag=";;;;;");  .cat(x);
;
;
;;;;;  ALIAS are key=>val pairs organized by any [GROUP]
;;;;;  external groups are PKG:: such as base ... [A-base]
;;;;;  internal groups are using underscore ... [A_internal]
;;;;;	THESE are processed separately



;;;;;;;;;;;;;;;;;;;;;;;; [A] for ALIAS or ALIASES or ALDUSDOi
;;; 
;;; A- [capital letter A][DASH] means FROM EXTERNAL LIBRARY (e.g., base)
;;;;;;;;;;;;;; ANYTHING THAT DOES NOT START WITH [A-*] will be treated as local function (humanVerse or yours)
[A-base]
;; if -base and base::ceiling ... OKAY ... ceiling ==> base::ceiling 
;; alias will be assigned to humanVerse 'ns' NAMESPACE keeping ls() pure
;; these will be evaluated in alias.add ... NOT within the parser ...
;; NO =R or ^= here, will be ignored ... 


ceil 			= base::ceiling
suppressWarning = suppressWarnings;

dparse = deparse;



ord 	= utf8ToInt;  # mb_ord ?
chr 	= intToUtf8;

is.dataframe 	= is.data.frame;
dataframe 		= data.frame;
as.dataframe 	= as.data.frame;


mytimezone 	= Sys.timezone;
myTZ 		= Sys.timezone;
getTZ 		= Sys.timezone;


nchars 	= nchar;
deput 	= dput;

ln 		= log;
len 	= length; 


;;;; THIS WON'T WORK ... one key=val per line
;; is.boolean = is.bool = is.logical;
is.Inf 		= is.infinite;
is.boolean 	= is.logical;
is.bool 	= is.logical;

### THESE FUNCTIONS SEEM TO BE "mono-nuclear"
is.true 	= isTRUE;
is.false 	= isFALSE;


rowbind 	= rbind;
colbind 	= cbind;

invisilbe 	= invisible;

unset 		= rm;

file.delete = unlink;

dir.name 	= dirname;

tmp 		= tempdir;
tmpdir 		= tempdir;
temp 		= tempdir;

readChars 	= readChar;

writeRDS 	= saveRDS;           # where is read/write?
loadRDS 	= readRDS        ;; multiline bug 

writeRData 	= save;
saveRData 	= save;
readRData 	= load;
loadRData 	= load;

[A-graphics]
axes 	= axis;

[A-utils]
citeR	= utils:::.citation;

install.package = utils::install.packages;















########################## INTERNALS #########################

[humanVerse-prep]
arg.prep 	= prep.arg; 
prep.args 	= prep.arg; 

[humanVerse-utils]
as.Type 	= as.type;

fn.exists 	= check.fn;
	
obj.exists 	= check.obj;

deput.one 	= dput.one;


quick.source 	= quick; 
qucik 			= quick;
quikc			= quick;



[humanVerse-check]
check.num = check.number;

[humanVerse-filesystem]

path.fromClipboard = path.pasteFrom;
is.windoze 		= is.windows;

ping = ping.domain;
 



[humanVerse-file]
file.writeToPipe 	= writeToPipe;
f.writeToPipe 		= writeToPipe;
# readFromPipe
file.open 	= fopen;
file.close 	= fclose;

inode.exists 	= path.exists_;
inode.exists_ 	= path.exists_;


[humanVerse-number]
num.round = int.round;
num.toSci = num.toScientific;
num.toSCI = num.toScientific;

num.toNat = num.toNatural;
num.toNAT = num.toNatural;

num.toFix = num.toFixed;
num.toFIX = num.toFixed;

num.toEng = num.toEngineering;
num.toENG = num.toEngineering;

num.toContinuousFraction = num.toCFrac;


lcm 		= gcd.lcm;
gcd.lcd 	= gcd.lcm;
lcd 		= gcd.lcm;
gcd 		= gcd.lcm;

base.to = int2base;
toBase = int2base;
base.from = base2int;
fromBase = base2int;

[humanVerse-functions]

suppressErrors 	= suppressError;

fn.StepInto 	= fn.stepInto;

fn.arg 			= fn.args;	

fn.method 		= fn.methods;
	
	
	
fns.inPackage 	= fn.inPackage;


[humanVerse-special] 

## is .PIPE. and .OR. collision ... 
"%>>%" 	= .SHIFT_R.;
"%<<%" 	= .SHIFT_L.;
"%&%" 	= .AND.
;; is this broken in parser ??
;; collision with PIPE operators, DOH!
"%|%" 	= .OR.    
"%^%" 	= .XOR.
"%~%"	= .NOT.

    
nPr 		= "%nPr%";
nCr 		= "%nCr%";
num.den 	= "%frac%";

"%+%" = .ADD.;   # outer addition of two vectors ...
	
"%~=%" = is.equal;  ;; this "=" is a [EDGE CASE] for the parser 
"%eq%" = is.equal;  ;; count "=" in lines ... 

"%~>%" = is.ge; 
"%ge%" = is.ge; 
	
"%~<%" = is.le;
"%le%" = is.le;	

####
 
"%GLOBAL%" 	= .GLOBAL.;  # assign to global envir
"%TO%" 		= .TO.;		 # assign to XXX envir 
"%IN%" 		= IN;   	 # "%in%" with memory ... 
"%THIS%" 	= .THIS.;    # get function name INSIDE, plus more  


##### INCREMENTING OPERATORS #####
"%++%" = .PLUS_PLUS.;		  ; `i%++%.`  vs `.%++%i` ... like C++ 
"%+=%" = .PLUS_EQUAL.;
"%--%" = .MINUS_MINUS.;		
"%-=%" = .MINUS_EQUAL.;

##### STRING OPERATORS #####
;;; one of these appears to be broken in parser 
"%¦=%" 	= .PIPE_EQUAL.;		; left side pipe
"%=¦%" 	= .EQUAL_PIPE.;		; right side pipe 
;; collision with .OR. ;;; good luck using this one ...
"%¦%" 	= .PIPE.;			; separates each element with a PIPE
"%.%" 	= .DOT.;			; concatenate (adding string, no spaces)
"%. %" 	= .DOT_SPACE.;		; adding strings (one space)
"%.=%" 	= .DOT_EQUAL.;		





[humanVerse-strings]
is.substring = str.contains; 

str.reverse		= str.letterReverse;
letter.reverse	= str.letterReverse;
words.reverse 	= str.wordReverse;
word.reverse 	= str.wordReverse;

str.unsplit = str.implode;
str.split = str.explode;



str.shuffle		= str.letterShuffle;
letter.shuffle	= str.letterShuffle;
words.shuffle 	= str.wordShuffle;
word.shuffle 	= str.wordShuffle;

str.diff 		= str.subtract;

;; natural cascade, NO memory ... 
str.begin		= str.starts ; only a multiline if quote started ...
	
	
	str.start = str.begin;
	str.begins = str.begin;
	str.startsWith 	= str.begin;

str.end			= str.ends

	str.ends = str.end;
	str.stops = str.end;
	str.stop = str.end; 
str.endsWith 	= str.end;


.MD5		= str.toMD5



striptags 		= strip.tags;
str.striptags 	= strip.tags;
strip_tags 		= strip.tags;

strlen = str.len;
strpos = str.pos;




========> HARDSTOP ... 
[HARDSTOP]
# fn will expand out to function 
# matrix may collapse in to "m"

# maybe just use check.type with "NULL" added logic 
# isset = is.set;






## build this alias list in one spot, 
## load into namespace at init() (onLoad)

alias.init = function()
	{
	# if a%*%b is slower than crossprod(a,b), why not replace it?
	# "%*%" = crossproduct;

	# BASE = list(
			
	
	
	
	INTERNAL = list(); # smart aliasing on functions ... fn. expansion 
	 }
	 
	 
	arg.prep = prep.arg; 
	prep.args = prep.arg; 

	file.writeToPipe = writeToPipe;
	f.writeToPipe = writeToPipe;
	# readFromPipe
	file.open = fopen;
	file.close = fclose;

	# fseek ... fread ... freadlines 
	# writeRDS = saveRDS 
	# loadRDS = readRDS
	# save/load ... read/write 
	
	# writeRData = saveRData = save;
	# readRData = loadRData = load;
	
	nPr = "%nPr%";
	nCr = "%nCr%";
	
	num.den = "%frac%";
	
	num.toSci = num.toScientific;
	num.toSCI = num.toScientific;
	
	num.toNat = num.toNatural;
	num.toNAT = num.toNatural;
	
	num.toFix = num.toFixed;
	num.toFIX = num.toFixed;

	num.toEng = num.toEngineering;
	num.toENG = num.toEngineering;

	num.toContinuousFraction = num.toCFrac;

	fn.StepInto = fn.stepInto;

	fn.arg = fn.args;	

	fn.method = fn.methods;
	
	# ceiling ... ceil 
	
	
functions.inPackage = fns.inPackage = fn.inPackage;

	is.dataframe = is.data.frame;

is.Inf = is.infinite;

is.boolean = is.bool = is.logical;


str.contains = is.substring;

### THESE FUNCTIONS SEEM TO BE "mono-nuclear"
is.true = isTRUE;
is.false = isFALSE;


"%~=%" = "%eq%" = is.equal;
"%~>%" = "%ge%" = is.ge; 	
"%~<%" = "%le%" = is.le;



# fn will expand out to function 
# matrix may collapse in to "m"


# maybe property.set is "meta.set" as in meta-data ?  NAHA?<



axes = axis;
nchars = nchar;

ord = utf8ToInt;  # mb_ord ?
chr = intToUtf8;


dataframe = data.frame;

as.dataframe = as.data.frame;
ceil = ceiling;

ln = log;

len = length; 

file.delete = unlink;

is.windoze = is.windows;

invisilbe = invisible;

inode.exists = inode.exists_ = path.exists_;

str.diff = str.subtract;

str.startsWith = str.begin;
str.endsWith = str.end;
check.num = check.number; 


suppressErrors = suppressError;
suppressWarning = suppressWarnings;

path.fromClipboard = path.pasteFrom


unset = rm;


dir.name = dirname;

tmp = tmpdir = temp = tempdir;



filename = basename;



"%GLOBAL%" = .GLOBAL.;
"%TO%" = .TO.;	
"%THIS%" = .THIS.;  
"%+%" = .ADD.;   # outer addition of two vectors ... 



##### INCREMENTING OPERATORS #####
"%++%" = .PLUS_PLUS.;		  
"%+=%" = .PLUS_EQUAL.;
"%--%" = .MINUS_MINUS.;		
"%-=%" = .MINUS_EQUAL.;

##### STRING OPERATORS #####
"%|=%" = .PIPE_EQUAL.;
"%=|%" = .EQUAL_PIPE.;
"%|%" = .PIPE.;
"%.%" = .DOT.;
"%. %" = .DOT_SPACE.;
"%.=%" = .DOT_EQUAL.;


# > x= "monte"
# > y = "alex"
# > z = "mama"
# > x %.% y
# [1] "monte alex"
# > x %.% y %.% z
# [1] "monte alex mama"
# > x %.% y %.% z %.% y
# [1] "monte alex mama alex"
# > zz = x %.% y %.% z %.% y
# > zz
# [1] "monte alex mama alex"
# > zz %.=% a
# > zz
# [1] "monte alex mama alex|-7"
# > zz %=.% b
# > zz
# [1] "monte alex mama alex|-76|"


 
	
"%IN%" = IN;


as.Type = as.type;
readChars = readChar;


striptags = strip.tags;
str.striptags = strip.tags;
strip_tags = strip.tags;

function.exists = check.fn;
fn.exists = check.fn;
	
obj.exists = check.obj;

# maybe just use check.type with "NULL" added logic 
# isset = is.set;


rowbind = rbind;
colbind = cbind;
deput = dput;
deput.one = dput.one;


strpos = str.pos;


quick.source = qucik = quick; 

gcd = lcd = gcd.lcd = lcm = gcd.lcm;
	
	
	
	
	
alias.add = function()
	{
	# useful for documentation ...
	
	}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;{humanVerse};;;;;
;;;;;
;;;;;
;;;;;
;;;;;            Welcome to the {humanVerse}! 
;;;;;             
;;;;;             This is the ALIAS configuration file. 
;;;;;            
;;;;;             This is *different* built using `alias.add();`
;;;;;
;;;;;
;
;;;{R};;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;
;;;;;
;;;;;
; This is a configuration file
; Comments start with ';', as in php.ini
; x = str.pipeHeader("Welcome to the {humanVerse}! \n \n This is the ALIAS configuration file. \n\n This is *different* built using `alias.add();`", ctag=";", stag=";;;;;");  .cat(x);


;;;;;;;;;;;;;;;;;;;;;;;; [A] for ALIAS or ALIASES or ALDUSDOi
;;; UNDERSCORE means FROM INTERNAL {humanVerse} 
;;; DASH means FROM EXTERNAL LIBRARY (e.g., base)
[A-base]
;; if -base and base::ceiling ... OKAY ... ceiling ==> base::ceiling 
;; alias will be assigned to humanVerse 'ns' NAMESPACE keeping ls() pure
;; these will be evaluated in alias.add ... NOT within the parser ...
;; NO =R or ^= here, will be ignored ... 


ceil 			= base::ceiling
suppressWarning = suppressWarnings;

ord 	= utf8ToInt;  # mb_ord ?
chr 	= intToUtf8;

is.dataframe 	= is.data.frame;
dataframe 		= data.frame;
as.dataframe 	= as.data.frame;


mytimezone 	= Sys.timezone;
myTZ 		= Sys.timezone;
getTZ 		= Sys.timezone;


nchars 	= nchar;
deput 	= dput;

ln 		= log;
len 	= length; 


;;;; THIS WON'T WORK ... one key=val per line
;; is.boolean = is.bool = is.logical;
is.Inf 		= is.infinite;
is.boolean 	= is.logical;
is.bool 	= is.logical;

### THESE FUNCTIONS SEEM TO BE "mono-nuclear"
is.true 	= isTRUE;
is.false 	= isFALSE;


rowbind 	= rbind;
colbind 	= cbind;

invisilbe 	= invisible;

unset 		= rm;

file.delete = unlink;

dir.name 	= dirname;

tmp 		= tempdir;
tmpdir 		= tempdir;
temp 		= tempdir;

readChars 	= readChar;

writeRDS 	= saveRDS;           # where is read/write?
loadRDS 	= readRDS

writeRData 	= save;
saveRData 	= save;
readRData 	= load;
loadRData 	= load;

[A-graphics]
axes 	= axis;















########################## INTERNALS #########################

[A_prep]
arg.prep 	= prep.arg; 
prep.args 	= prep.arg; 

[A_utils]
as.Type 	= as.type;

fn.exists 	= check.fn;
	
obj.exists 	= check.obj;

deput.one 	= dput.one;


quick.source 	= quick; 
qucik 			= quick;



[A_check]
check.num = check.number;

[A_filesystem]

path.fromClipboard = path.pasteFrom;
is.windoze 		= is.windows;



[A_file]
file.writeToPipe 	= writeToPipe;
f.writeToPipe 		= writeToPipe;
# readFromPipe
file.open 	= fopen;
file.close 	= fclose;

inode.exists 	= path.exists_;
inode.exists_ 	= path.exists_;


[A_number]
num.toSci = num.toScientific;
num.toSCI = num.toScientific;

num.toNat = num.toNatural;
num.toNAT = num.toNatural;

num.toFix = num.toFixed;
num.toFIX = num.toFixed;

num.toEng = num.toEngineering;
num.toENG = num.toEngineering;

num.toContinuousFraction = num.toCFrac;


lcm 		= gcd.lcm;
gcd.lcd 	= gcd.lcm;
lcd 		= gcd.lcm;
gcd 		= gcd.lcm;


[A_functions]

suppressErrors 	= suppressError;

fn.StepInto 	= fn.stepInto;

fn.arg 			= fn.args;	

fn.method 		= fn.methods;
	
	
	
fns.inPackage 	= fn.inPackage;


[A_special] 
"%>>%" 	= .SHIFT_R.;
"%<<%" 	= .SHIFT_L.;
"%&%" 	= .AND.
"%|%" 	= .OR.    ;; is this broken in parser ??
"%^%" 	= .XOR.
"%~%"	= .NOT.

nPr 		= "%nPr%";
nCr 		= "%nCr%";
num.den 	= "%frac%";

"%+%" = .ADD.;   # outer addition of two vectors ...
	
"%~=%" = is.equal;  ;; this "=" is a [EDGE CASE] for the parser 
"%eq%" = is.equal;  ;; count "=" in lines ... 

"%~>%" = is.ge; 
"%ge%" = is.ge; 
	
"%~<%" = is.le;
"%le%" = is.le;	

####
 
"%GLOBAL%" 	= .GLOBAL.;  # assign to global envir
"%TO%" 		= .TO.;		 # assign to XXX envir 
"%IN%" 		= IN;   	 # "%in%" with memory ... 
"%THIS%" 	= .THIS.;    # get function name INSIDE, plus more  


##### INCREMENTING OPERATORS #####
"%++%" = .PLUS_PLUS.;		  ; `i%++%.`  vs `.%++%i` ... like C++ 
"%+=%" = .PLUS_EQUAL.;
"%--%" = .MINUS_MINUS.;		
"%-=%" = .MINUS_EQUAL.;

##### STRING OPERATORS #####
;;; one of these appears to be broken in parser 
"%|=%" 	= .PIPE_EQUAL.;		; left side pipe
"%=|%" 	= .EQUAL_PIPE.;		; right side pipe 
"%|%" 	= .PIPE.;			; separates each element with a PIPE
"%.%" 	= .DOT.;			; concatenate (adding string, no spaces)
"%. %" 	= .DOT_SPACE.;		; adding strings (one space)
"%.=%" 	= .DOT_EQUAL.;		

[A_strings]
str.contains 	= is.substring;

str.diff 		= str.subtract;

str.startsWith 	= str.begin;
str.endsWith 	= str.end;

striptags 		= strip.tags;
str.striptags 	= strip.tags;
strip_tags 		= strip.tags;

strlen = str.len;
strpos = str.pos;




========> HARDSTOP ... 
[HARDSTOP]
# fn will expand out to function 
# matrix may collapse in to "m"

# maybe just use check.type with "NULL" added logic 
# isset = is.set;
